// Test generated by RoostGPT for test test1 using AI Model gpt

```go
package main

import (
	"encoding/json"
	"errors"
	"log"
	"net/http"
	"net/http/httptest"
	"testing"
)

type Status struct {
	Message string `json:"message"`
	Code    int    `json:"code"`
}

func writeVoterResponse(w http.ResponseWriter, status Status) {
	w.Header().Set("Content-Type", "application/json")
	resp, err := json.Marshal(status)
	if err != nil {
		log.Println("error marshaling response to vote request. error: ", err)
	}
	w.Write(resp)
}

func TestWriteVoterResponsed4e306ce05(t *testing.T) {
	// Test case 1: Successful scenario
	t.Run("successful scenario", func(t *testing.T) {
		status := Status{
			Message: "Vote has been cast successfully.",
			Code:    200,
		}

		req := httptest.NewRequest(http.MethodGet, "http://localhost", nil)
		rec := httptest.NewRecorder()

		writeVoterResponse(rec, status)

		res := rec.Result()
		defer res.Body.Close()

		if res.StatusCode != http.StatusOK {
			t.Errorf("expected status OK; got %v", res.Status)
		}

		var got Status
		json.NewDecoder(res.Body).Decode(&got)

		if got != status {
			t.Errorf("expected %v; got %v", status, got)
		}
	})

	// Test case 2: Failure scenario - JSON marshaling fails
	t.Run("failure scenario", func(t *testing.T) {
		oldMarshal := json.Marshal
		defer func() { json.Marshal = oldMarshal }()

		json.Marshal = func(v interface{}) ([]byte, error) {
			return nil, errors.New("marshaling error")
		}

		status := Status{
			Message: "Vote has been cast successfully.",
			Code:    200,
		}

		req := httptest.NewRequest(http.MethodGet, "http://localhost", nil)
		rec := httptest.NewRecorder()

		writeVoterResponse(rec, status)

		res := rec.Result()
		defer res.Body.Close()

		if res.StatusCode != http.StatusOK {
			t.Errorf("expected status OK; got %v", res.Status)
		}

		var got Status
		json.NewDecoder(res.Body).Decode(&got)

		if got != status {
			t.Errorf("expected %v; got %v", status, got)
		}
	})
}