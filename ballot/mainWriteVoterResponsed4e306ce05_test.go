// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

type Status struct {
	Code    int
	Message string
}

func writeVoterResponse(w http.ResponseWriter, status Status) {
	w.Header().Set("Content-Type", "application/json")
	resp, err := json.Marshal(status)
	if err != nil {
		t.Log("error marshaling response to vote request. error: ", err)
	}
	w.Write(resp)
}

func TestWriteVoterResponsed4e306ce05(t *testing.T) {
	// Test case 1: Successful response
	w := httptest.NewRecorder()
	expectedStatus := Status{Code: 200, Message: "Vote received"}
	writeVoterResponse(w, expectedStatus)
	resp := w.Result()
	if resp.StatusCode != http.StatusOK {
		t.Error("Expected status OK, got ", resp.Status)
	}
	body, _ := io.ReadAll(resp.Body)
	var actualStatus Status
	json.Unmarshal(body, &actualStatus)
	if actualStatus != expectedStatus {
		t.Errorf("Expected status %v, got %v", expectedStatus, actualStatus)
	}

	// Test case 2: Error while marshaling
	w = httptest.NewRecorder()
	expectedStatus = Status{Code: 200, Message: string([]byte{0x80, 0x81, 0x82})}
	writeVoterResponse(w, expectedStatus)
	resp = w.Result()
	if resp.StatusCode != http.StatusOK {
		t.Error("Expected status OK, got ", resp.Status)
	}
	body, _ = io.ReadAll(resp.Body)
	json.Unmarshal(body, &actualStatus)
	if actualStatus.Code != 0 || actualStatus.Message != "" {
		t.Errorf("Expected status with Code: 0 and Message: '', got %v", actualStatus)
	}
}
