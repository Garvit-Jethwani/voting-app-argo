// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

type Status struct {
	StatusCode int
	Message    string
}

func writeVoterResponse(w http.ResponseWriter, status Status) {
	w.Header().Set("Content-Type", "application/json")
	resp, err := json.Marshal(status)
	if err != nil {
		log.Println("error marshaling response to vote request. error: ", err)
	}
	w.Write(resp)
}

func TestWriteVoterResponsed4e306ce05(t *testing.T) {
	// Test Case 1: Check if the function correctly writes the response
	t.Run("Correct Response", func(t *testing.T) {
		recorder := httptest.NewRecorder()
		status := Status{StatusCode: 200, Message: "Vote Registered"}
		writeVoterResponse(recorder, status)

		result := recorder.Result()
		defer result.Body.Close()

		if result.StatusCode != http.StatusOK {
			t.Errorf("expected status OK; got %v", result.Status)
		}

		body, _ := ioutil.ReadAll(result.Body)
		var resp Status
		json.Unmarshal(body, &resp)

		if resp != status {
			t.Errorf("expected %v; got %v", status, resp)
		}
	})

	// Test Case 2: Check if function handles marshalling error
	t.Run("Marshalling Error", func(t *testing.T) {
		oldMarshal := json.Marshal
		defer func() { json.Marshal = oldMarshal }()

		json.Marshal = func(interface{}) ([]byte, error) {
			return nil, errors.New("mock error")
		}

		recorder := httptest.NewRecorder()
		status := Status{StatusCode: 200, Message: "Vote Registered"}
		writeVoterResponse(recorder, status)

		result := recorder.Result()
		defer result.Body.Close()

		body, _ := ioutil.ReadAll(result.Body)

		if len(body) != 0 {
			t.Errorf("expected empty body due to marshal error; got %v", string(body))
		}
	})
}
