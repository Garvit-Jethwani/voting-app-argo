// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

type Status struct {
	Message string `json:"message"`
	Code    int    `json:"code"`
}

func writeVoterResponse(w http.ResponseWriter, status Status) {
	w.Header().Set("Content-Type", "application/json")
	resp, err := json.Marshal(status)
	if err != nil {
		log.Println("error marshaling response to vote request. error: ", err)
	}
	w.Write(resp)
}

func TestWriteVoterResponsed4e306ce05(t *testing.T) {
	t.Run("Success Case", func(t *testing.T) {
		req, err := http.NewRequest("GET", "http://localhost:8080", nil)
		if err != nil {
			t.Fatal(err)
		}

		rec := httptest.NewRecorder()
		writeVoterResponse(rec, Status{Message: "Success", Code: 200})

		res := rec.Result()
		defer res.Body.Close()

		if res.StatusCode != http.StatusOK {
			t.Errorf("expected status OK; got %v", res.Status)
		}

		body, _ := io.ReadAll(res.Body)

		var status Status
		json.Unmarshal(body, &status)

		if status.Message != "Success" || status.Code != 200 {
			t.Errorf("unexpected body in response: %q", body)
		}
	})

	t.Run("Error Case", func(t *testing.T) {
		req, err := http.NewRequest("GET", "http://localhost:8080", nil)
		if err != nil {
			t.Fatal(err)
		}

		rec := httptest.NewRecorder()
		writeVoterResponse(rec, Status{Message: "Error", Code: 500})

		res := rec.Result()
		defer res.Body.Close()

		if res.StatusCode != http.StatusOK {
			t.Errorf("expected status OK; got %v", res.Status)
		}

		body, _ := io.ReadAll(res.Body)

		var status Status
		json.Unmarshal(body, &status)

		if status.Message != "Error" || status.Code != 500 {
			t.Errorf("unexpected body in response: %q", body)
		}
	})
}