// Test generated by RoostGPT for test test1 using AI Model gpt

```go
package main

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

type Status struct {
	Message string `json:"message"`
	Code    int    `json:"code"`
}

func writeVoterResponse(w http.ResponseWriter, status Status) {
	w.Header().Set("Content-Type", "application/json")
	resp, err := json.Marshal(status)
	if err != nil {
		log.Println("error marshaling response to vote request. error: ", err)
	}
	w.Write(resp)
}

func TestWriteVoterResponse(t *testing.T) {
	t.Run("Success case", func(t *testing.T) {
		status := Status{Message: "Success", Code: 200}
		req := httptest.NewRequest("GET", "http://example.com/foo", nil)
		w := httptest.NewRecorder()
		writeVoterResponse(w, status)

		resp := w.Result()
		body, _ := ioutil.ReadAll(resp.Body)

		if resp.StatusCode != http.StatusOK {
			t.Errorf("Expected status code to be %v, got %v", http.StatusOK, resp.StatusCode)
		}

		var result Status
		json.Unmarshal(body, &result)
		if result != status {
			t.Errorf("Expected body to be %v, got %v", status, result)
		}
	})

	t.Run("Error case", func(t *testing.T) {
		status := Status{Message: "Error", Code: 500}
		req := httptest.NewRequest("GET", "http://example.com/foo", nil)
		w := httptest.NewRecorder()
		writeVoterResponse(w, status)

		resp := w.Result()
		body, _ := ioutil.ReadAll(resp.Body)

		if resp.StatusCode != http.StatusOK {
			t.Errorf("Expected status code to be %v, got %v", http.StatusOK, resp.StatusCode)
		}

		var result Status
		json.Unmarshal(body, &result)
		if result != status {
			t.Errorf("Expected body to be %v, got %v", status, result)
		}
	})
}