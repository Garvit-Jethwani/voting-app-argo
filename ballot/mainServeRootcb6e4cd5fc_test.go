// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestServeRootcb6e4cd5fc(t *testing.T) {
	req, err := http.NewRequest("GET", "/", nil)
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(serveRoot)

	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusOK)
	}

	expected := `{"TotalVotes":0,"Results":[]}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v",
			rr.Body.String(), expected)
	}
}

func TestServeRootcb6e4cd5fcPost(t *testing.T) {
	vote := `{"VoterID": "123", "CandidateID": "456"}`
	req, err := http.NewRequest("POST", "/", strings.NewReader(vote))
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(serveRoot)

	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusCreated {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusCreated)
	}

	expected := `{"Code":201,"Message":"Vote saved sucessfully"}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v",
			rr.Body.String(), expected)
	}
}
```

Please note that these tests are assuming that the `getCandidatesVote` and `saveVote` functions are working correctly and the `Vote` struct is defined as follows:

```go
type Vote struct {
	VoterID     string `json:"VoterID"`
	CandidateID string `json:"CandidateID"`
}
```

Also, the `Status` struct is defined as follows:

```go
type Status struct {
	Code    int    `json:"Code"`
	Message string `json:"Message"`
}
```

And the `CandidateVotes` and `Response` structs are defined as follows:

```go
type CandidateVotes struct {
	CandidateID string `json:"CandidateID"`
	Votes       int    `json:"Votes"`
}

type Response struct {
	TotalVotes int              `json:"TotalVotes"`
	Results    []CandidateVotes `json:"Results"`
}