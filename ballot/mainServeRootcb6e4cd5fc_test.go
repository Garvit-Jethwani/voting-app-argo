// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"bytes"
	"net/http"
	"net/http/httptest"
	"testing"
)

type MockResponseWriter struct {
	header http.Header
	body   *bytes.Buffer
}

func (m *MockResponseWriter) Header() http.Header {
	return m.header
}

func (m *MockResponseWriter) Write(data []byte) (int, error) {
	return m.body.Write(data)
}

func (m *MockResponseWriter) WriteHeader(statusCode int) {
	// Intentionally left blank as we don't need this for our tests
}

func TestServeRoot(t *testing.T) {
	t.Run("GET request", func(t *testing.T) {
		req, err := http.NewRequest("GET", "/", nil)
		if err != nil {
			t.Fatalf("could not create request: %v", err)
		}
		rec := httptest.NewRecorder()
		serveRoot(rec, req)
		res := rec.Result()
		if res.StatusCode != http.StatusOK {
			t.Errorf("expected status OK; got %v", res.Status)
		}
	})

	t.Run("POST request", func(t *testing.T) {
		req, err := http.NewRequest("POST", "/", bytes.NewBuffer([]byte(`{"VoterID": "123", "CandidateID": "456"}`)))
		if err != nil {
			t.Fatalf("could not create request: %v", err)
		}
		rec := httptest.NewRecorder()
		serveRoot(rec, req)
		res := rec.Result()
		if res.StatusCode != http.StatusCreated {
			t.Errorf("expected status CREATED; got %v", res.Status)
		}
	})

	t.Run("Unsupported method", func(t *testing.T) {
		req, err := http.NewRequest("PUT", "/", nil)
		if err != nil {
			t.Fatalf("could not create request: %v", err)
		}
		rec := httptest.NewRecorder()
		serveRoot(rec, req)
		res := rec.Result()
		if res.StatusCode != http.StatusMethodNotAllowed {
			t.Errorf("expected status Method Not Allowed; got %v", res.Status)
		}
	})
}