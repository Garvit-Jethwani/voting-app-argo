// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

type mockVote struct {
	VoterID     string `json:"voterID"`
	CandidateID string `json:"candidateID"`
}

func TestServeRootcb6e4cd5fc(t *testing.T) {
	// Test case 1: GET method
	req, err := http.NewRequest("GET", "/", nil)
	if err != nil {
		t.Fatal(err)
	}
	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(serveRoot)
	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
	}

	expected := `{"results":[{"candidateID":"John","votes":100}],"totalVotes":100}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
	}

	// Test case 2: POST method
	vote := &mockVote{
		VoterID:     "voter1",
		CandidateID: "candidate1",
	}
	voteJSON, _ := json.Marshal(vote)
	req, err = http.NewRequest("POST", "/", strings.NewReader(string(voteJSON)))
	if err != nil {
		t.Fatal(err)
	}
	rr = httptest.NewRecorder()
	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusCreated {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusCreated)
	}

	expected = `{"code":201,"message":"Vote saved successfully"}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
	}

	// Test case 3: Unsupported method
	req, err = http.NewRequest("PUT", "/", nil)
	if err != nil {
		t.Fatal(err)
	}
	rr = httptest.NewRecorder()
	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusMethodNotAllowed {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusMethodNotAllowed)
	}

	expected = `{"code":405,"message":"Bad Request. Vote can not be saved"}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
	}
}
