// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

// TODO: Implement getCandidatesVote and saveVote methods for tests

func getCandidatesVote() map[string]int {
	return map[string]int{"1": 10, "2": 20}
}

func saveVote(vote Vote) error {
	if vote.VoterID == "" || vote.CandidateID == "" {
		return errors.New("invalid vote")
	}
	return nil
}

func TestServeRoot(t *testing.T) {
	// Test case 1: GET Method
	req, err := http.NewRequest("GET", "/", nil)
	if err != nil {
		t.Fatal(err)
	}
	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(serveRoot)
	handler.ServeHTTP(rr, req)
	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusOK)
	}
	expected := `{"Results":[{"CandidateID":"2","Votes":20},{"CandidateID":"1","Votes":10}],"TotalVotes":30}`
	if rr.Body.String() != expected {
		t.Errorf("handler returned unexpected body: got %v want %v",
			rr.Body.String(), expected)
	}

	// Test case 2: POST Method with valid data
	vote := `{"VoterID":"1","CandidateID":"2"}`
	req, err = http.NewRequest("POST", "/", strings.NewReader(vote))
	if err != nil {
		t.Fatal(err)
	}
	rr = httptest.NewRecorder()
	handler = http.HandlerFunc(serveRoot)
	handler.ServeHTTP(rr, req)
	if status := rr.Code; status != http.StatusCreated {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusCreated)
	}

	// Test case 3: POST Method with invalid data
	vote = `{"VoterID":"","CandidateID":"2"}`
	req, err = http.NewRequest("POST", "/", strings.NewReader(vote))
	if err != nil {
		t.Fatal(err)
	}
	rr = httptest.NewRecorder()
	handler = http.HandlerFunc(serveRoot)
	handler.ServeHTTP(rr, req)
	if status := rr.Code; status != http.StatusBadRequest {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusBadRequest)
	}

	// Test case 4: Unsupported Method
	req, err = http.NewRequest("PUT", "/", nil)
	if err != nil {
		t.Fatal(err)
	}
	rr = httptest.NewRecorder()
	handler = http.HandlerFunc(serveRoot)
	handler.ServeHTTP(rr, req)
	if status := rr.Code; status != http.StatusMethodNotAllowed {
		t.Errorf("handler returned wrong status code: got %v want %v",
			status, http.StatusMethodNotAllowed)
	}
}