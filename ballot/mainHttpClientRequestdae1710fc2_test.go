// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"bytes"
	"errors"
	"io"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestHttpClientRequestdae1710fc2(t *testing.T) {
	tt := []struct {
		name      string
		operation string
		hostAddr  string
		command   string
		params    io.Reader
		wantCode  int
		wantBody  []byte
		wantErr   error
	}{
		{
			name:      "Success case",
			operation: "POST",
			hostAddr:  "http://localhost:8080",
			command:   "/test",
			params:    bytes.NewBuffer([]byte(`{"key":"value"}`)),
			wantCode:  200,
			wantBody:  []byte(`{"response":"success"}`),
			wantErr:   nil,
		},
		{
			name:      "Failure case",
			operation: "POST",
			hostAddr:  "http://localhost:8080",
			command:   "/test",
			params:    bytes.NewBuffer([]byte(`{"key":"value"}`)),
			wantCode:  400,
			wantBody:  nil,
			wantErr:   errors.New("status code error 400"),
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			// Start a local HTTP server
			server := httptest.NewServer(http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {
				// Test request parameters
				if req.URL.String() != tc.command {
					t.Errorf("want %s; got %s", tc.command, req.URL.String())
				}

				// Send response to be tested
				if tc.wantCode == 200 {
					rw.Write(tc.wantBody)
				} else {
					rw.WriteHeader(tc.wantCode)
				}
			}))
			// Close the server when test finishes
			defer server.Close()

			gotCode, gotBody, gotErr := httpClientRequest(tc.operation, server.URL, tc.command, tc.params)
			if gotCode != tc.wantCode {
				t.Errorf("want %d; got %d", tc.wantCode, gotCode)
			}
			if string(gotBody) != string(tc.wantBody) {
				t.Errorf("want %s; got %s", string(tc.wantBody), string(gotBody))
			}
			if (gotErr != nil && tc.wantErr == nil) || (gotErr == nil && tc.wantErr != nil) || (gotErr != nil && tc.wantErr != nil && gotErr.Error() != tc.wantErr.Error()) {
				t.Errorf("want %v; got %v", tc.wantErr, gotErr)
			}
		})
	}
}