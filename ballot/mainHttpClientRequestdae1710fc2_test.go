// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"bytes"
	"errors"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestHttpClientRequestdae1710fc2(t *testing.T) {
	// Create a test server
	testServer := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte("test response"))
	}))
	defer testServer.Close()

	// Test successful request
	statusCode, body, err := httpClientRequest("GET", testServer.URL, "/test", nil)
	if err != nil {
		t.Error("Expected no error, got ", err.Error())
	}
	if statusCode != http.StatusOK {
		t.Error("Expected status code 200, got ", statusCode)
	}
	if string(body) != "test response" {
		t.Error("Expected 'test response', got ", string(body))
	}

	// Test request with error
	_, _, err = httpClientRequest("GET", "http://invalid-url", "/test", nil)
	if err == nil {
		t.Error("Expected error, got nil")
	}
	if !strings.Contains(err.Error(), "Failed to create HTTP request.") {
		t.Error("Expected 'Failed to create HTTP request.' error, got ", err.Error())
	}

	// Test request with non 2xx/3xx status code
	testServerError := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusBadRequest)
	}))
	defer testServerError.Close()

	statusCode, _, err = httpClientRequest("GET", testServerError.URL, "/test", bytes.NewBuffer([]byte("test")))
	if err == nil {
		t.Error("Expected error, got nil")
	}
	if statusCode != http.StatusBadRequest {
		t.Error("Expected status code 400, got ", statusCode)
	}
}
