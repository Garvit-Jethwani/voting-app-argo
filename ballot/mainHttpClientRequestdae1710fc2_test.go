// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"bytes"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestHttpClientRequestdae1710fc2(t *testing.T) {
	// Test case 1: Valid HTTP request
	t.Run("valid request", func(t *testing.T) {
		handler := func(w http.ResponseWriter, r *http.Request) {
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("Hello, client"))
		}
		server := httptest.NewServer(http.HandlerFunc(handler))
		defer server.Close()

		statusCode, body, err := httpClientRequest("GET", server.URL, "/", nil)
		if err != nil {
			t.Error(err)
		}
		if statusCode != http.StatusOK {
			t.Errorf("Expected status code %d, got %d", http.StatusOK, statusCode)
		}
		if string(body) != "Hello, client" {
			t.Errorf("Expected body 'Hello, client', got '%s'", string(body))
		}
	})

	// Test case 2: Invalid HTTP request
	t.Run("invalid request", func(t *testing.T) {
		_, _, err := httpClientRequest("GET", "invalid_url", "/", nil)
		if err == nil {
			t.Error("Expected error, got nil")
		}
	})

	// Test case 3: Non-2xx/3xx status code
	t.Run("non-2xx/3xx status code", func(t *testing.T) {
		handler := func(w http.ResponseWriter, r *http.Request) {
			w.WriteHeader(http.StatusNotFound)
		}
		server := httptest.NewServer(http.HandlerFunc(handler))
		defer server.Close()

		statusCode, _, err := httpClientRequest("GET", server.URL, "/", nil)
		if err == nil {
			t.Error("Expected error, got nil")
		}
		if statusCode != http.StatusNotFound {
			t.Errorf("Expected status code %d, got %d", http.StatusNotFound, statusCode)
		}
	})

	// Test case 4: POST request with JSON body
	t.Run("POST request with JSON body", func(t *testing.T) {
		handler := func(w http.ResponseWriter, r *http.Request) {
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("Hello, client"))
		}
		server := httptest.NewServer(http.HandlerFunc(handler))
		defer server.Close()

		jsonBody := bytes.NewBuffer([]byte(`{"key": "value"}`))
		statusCode, body, err := httpClientRequest("POST", server.URL, "/", jsonBody)
		if err != nil {
			t.Error(err)
		}
		if statusCode != http.StatusOK {
			t.Errorf("Expected status code %d, got %d", http.StatusOK, statusCode)
		}
		if string(body) != "Hello, client" {
			t.Errorf("Expected body 'Hello, client', got '%s'", string(body))
		}
	})
}
