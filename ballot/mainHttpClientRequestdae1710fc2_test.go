// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"bytes"
	"errors"
	"io"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestHttpClientRequestdae1710fc2(t *testing.T) {
	// Mock server to handle requests
	server := httptest.NewServer(http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {
		rw.WriteHeader(http.StatusOK)
		rw.Write([]byte(`OK`))
	}))
	defer server.Close()

	// Test case 1: Valid request
	code, body, err := httpClientRequest("GET", server.URL, "/test", nil)
	if err != nil {
		t.Error("Expected no error, got:", err)
	}
	if code != http.StatusOK {
		t.Error("Expected status 200, got:", code)
	}
	if string(body) != "OK" {
		t.Error("Expected body 'OK', got:", string(body))
	}

	// Test case 2: Invalid operation
	code, _, err = httpClientRequest("INVALID", server.URL, "/test", nil)
	if err == nil {
		t.Error("Expected error, got nil")
	}
	if !errors.Is(err, http.ErrNotSupported) {
		t.Error("Expected 'http: invalid method INVALID', got:", err)
	}

	// Test case 3: Invalid host address
	code, _, err = httpClientRequest("GET", "invalid", "/test", nil)
	if err == nil {
		t.Error("Expected error, got nil")
	}
	if !strings.Contains(err.Error(), "unsupported protocol scheme") {
		t.Error("Expected 'unsupported protocol scheme', got:", err)
	}

	// Test case 4: Non-JSON response
	server2 := httptest.NewServer(http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {
		rw.WriteHeader(http.StatusOK)
		rw.Write([]byte(`Not JSON`))
	}))
	defer server2.Close()

	code, body, err = httpClientRequest("GET", server2.URL, "/test", nil)
	if err != nil {
		t.Error("Expected no error, got:", err)
	}
	if code != http.StatusOK {
		t.Error("Expected status 200, got:", code)
	}
	if string(body) != "Not JSON" {
		t.Error("Expected body 'Not JSON', got:", string(body))
	}

	// Test case 5: Request with parameters
	params := bytes.NewBuffer([]byte(`{"key": "value"}`))
	code, body, err = httpClientRequest("POST", server.URL, "/test", params)
	if err != nil {
		t.Error("Expected no error, got:", err)
	}
	if code != http.StatusOK {
		t.Error("Expected status 200, got:", code)
	}
	if string(body) != "OK" {
		t.Error("Expected body 'OK', got:", string(body))
	}
}