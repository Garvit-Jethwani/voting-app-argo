// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"bytes"
	"errors"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestHttpClientRequestdae1710fc2(t *testing.T) {
	server := httptest.NewServer(http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {
		rw.Write([]byte(`OK`))
	}))
	defer server.Close()

	t.Run("test successful request", func(t *testing.T) {
		status, body, err := httpClientRequest("GET", server.URL, "/", nil)
		if err != nil {
			t.Error("Expected no error, got ", err)
		}
		if status != http.StatusOK {
			t.Error("Expected status OK, got ", status)
		}
		if string(body) != "OK" {
			t.Error("Expected body to be 'OK', got ", string(body))
		}
	})

	t.Run("test unsuccessful request", func(t *testing.T) {
		status, body, err := httpClientRequest("GET", "http://invalid.url", "/", nil)
		if err == nil {
			t.Error("Expected error, got none")
		}
		if status != http.StatusBadRequest {
			t.Error("Expected status BadRequest, got ", status)
		}
		if body != nil {
			t.Error("Expected body to be nil, got ", body)
		}
	})

	t.Run("test invalid operation", func(t *testing.T) {
		status, body, err := httpClientRequest("INVALID", server.URL, "/", nil)
		if err == nil {
			t.Error("Expected error, got none")
		}
		if status != http.StatusBadRequest {
			t.Error("Expected status BadRequest, got ", status)
		}
		if body != nil {
			t.Error("Expected body to be nil, got ", body)
		}
	})

	t.Run("test request with params", func(t *testing.T) {
		params := bytes.NewBufferString(`{"key":"value"}`)
		status, body, err := httpClientRequest("POST", server.URL, "/", params)
		if err != nil {
			t.Error("Expected no error, got ", err)
		}
		if status != http.StatusOK {
			t.Error("Expected status OK, got ", status)
		}
		if string(body) != "OK" {
			t.Error("Expected body to be 'OK', got ", string(body))
		}
	})
}