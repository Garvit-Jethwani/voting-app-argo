// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"bytes"
	"io"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestHttpClientRequestdae1710fc2(t *testing.T) {
	// Mock HTTP server
	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		io.WriteString(w, `{"status": "success"}`)
	}))
	defer ts.Close()

	// Test case 1: Successful request
	operation := "GET"
	hostAddr := ts.URL
	command := ""
	params := bytes.NewBuffer([]byte(`{"key":"value"}`))
	status, body, err := httpClientRequest(operation, hostAddr, command, params)
	if err != nil {
		t.Error("Expected no error, got", err)
	}
	if status != 200 {
		t.Error("Expected status 200, got", status)
	}
	if !strings.Contains(string(body), "success") {
		t.Error("Expected body to contain 'success', got", string(body))
	}

	// Test case 2: Invalid operation
	operation = "INVALID"
	status, _, err = httpClientRequest(operation, hostAddr, command, params)
	if err == nil {
		t.Error("Expected error, got nil")
	}
	if status != http.StatusBadRequest {
		t.Error("Expected status 400, got", status)
	}

	// Test case 3: Invalid host address
	operation = "GET"
	hostAddr = "http://invalid"
	status, _, err = httpClientRequest(operation, hostAddr, command, params)
	if err == nil {
		t.Error("Expected error, got nil")
	}
	if status != http.StatusBadRequest {
		t.Error("Expected status 400, got", status)
	}
}