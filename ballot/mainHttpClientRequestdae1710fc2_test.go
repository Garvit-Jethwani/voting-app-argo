// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"bytes"
	"errors"
	"io"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestHttpClientRequestdae1710fc2(t *testing.T) {
	tests := []struct {
		name            string
		operation       string
		hostAddr        string
		command         string
		params          io.Reader
		mockHandlerFunc func(w http.ResponseWriter, r *http.Request)
		wantStatus      int
		wantErr         bool
	}{
		{
			name:      "successful GET request",
			operation: "GET",
			hostAddr:  "",
			command:   "/test",
			params:    nil,
			mockHandlerFunc: func(w http.ResponseWriter, r *http.Request) {
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("test successful"))
			},
			wantStatus: http.StatusOK,
			wantErr:    false,
		},
		{
			name:      "successful POST request",
			operation: "POST",
			hostAddr:  "",
			command:   "/test",
			params:    bytes.NewBuffer([]byte(`{"key":"value"}`)),
			mockHandlerFunc: func(w http.ResponseWriter, r *http.Request) {
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("post successful"))
			},
			wantStatus: http.StatusOK,
			wantErr:    false,
		},
		{
			name:      "failed request with bad operation",
			operation: "BAD",
			hostAddr:  "",
			command:   "/test",
			params:    nil,
			mockHandlerFunc: func(w http.ResponseWriter, r *http.Request) {
				w.WriteHeader(http.StatusBadRequest)
			},
			wantStatus: http.StatusBadRequest,
			wantErr:    true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			server := httptest.NewServer(http.HandlerFunc(tt.mockHandlerFunc))
			defer server.Close()

			// Update hostAddr to use mock server
			tt.hostAddr = server.URL

			gotStatus, _, err := httpClientRequest(tt.operation, tt.hostAddr, tt.command, tt.params)

			if (err != nil) != tt.wantErr {
				t.Errorf("httpClientRequest() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if gotStatus != tt.wantStatus {
				t.Errorf("httpClientRequest() gotStatus = %v, wantStatus = %v", gotStatus, tt.wantStatus)
			}
		})
	}
}