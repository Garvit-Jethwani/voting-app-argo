// Test generated by RoostGPT for test test1 using AI Model gpt

package main

import (
	"testing"
)

// Mocking Vote structure
type Vote struct {
	CandidateID string
}

// Mocking candidateVotesStore
var candidateVotesStore map[string]int

// Mocking getCandidatesVote function
func getCandidatesVote() map[string]int {
	if candidateVotesStore == nil {
		candidateVotesStore = make(map[string]int)
	}
	return candidateVotesStore
}

// Function to be tested
func saveVote(vote Vote) error {
	candidateVotesStore = getCandidatesVote()
	candidateVotesStore[vote.CandidateID]++
	return nil
}

// Test case for saveVote function
func TestSaveVote31e2883bdc(t *testing.T) {
	// Test case 1: When a vote is saved successfully
	vote1 := Vote{CandidateID: "candidate1"}
	err := saveVote(vote1)
	if err != nil {
		t.Error("Expected nil, got ", err)
	}
	if candidateVotesStore[vote1.CandidateID] != 1 {
		t.Error("Expected 1, got ", candidateVotesStore[vote1.CandidateID])
	}

	// Test case 2: When a vote is saved for the same candidate again
	err = saveVote(vote1)
	if err != nil {
		t.Error("Expected nil, got ", err)
	}
	if candidateVotesStore[vote1.CandidateID] != 2 {
		t.Error("Expected 2, got ", candidateVotesStore[vote1.CandidateID])
	}

	// Test case 3: When a vote is saved for a different candidate
	vote2 := Vote{CandidateID: "candidate2"}
	err = saveVote(vote2)
	if err != nil {
		t.Error("Expected nil, got ", err)
	}
	if candidateVotesStore[vote2.CandidateID] != 1 {
		t.Error("Expected 1, got ", candidateVotesStore[vote2.CandidateID])
	}
}
